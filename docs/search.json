[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SDS 410: Capstone",
    "section": "",
    "text": "This one-semester course leverages students’ previous coursework to address a real-world data analysis problem. Students collaborate in teams on projects sponsored by academia, government, and/or industry. Professional skills developed include: ethics, project management, collaborative software development, documentation, and consulting. Regular team meetings, weekly progress reports, interim and final reports, and multiple presentations are required. Open only to Statistical and Data Science majors.\nClasses will be held on Tuesdays and Thursdays from 1:20 PM to 2:35 PM.\n\n\n\n\n\n\n\n\nLindsay Poirier, she/her/hers.\n\n\n\n\n\nI am a cultural anthropologist that studies how civic data gets produced, how communities think about and interface with data, and how data infrastructure can be designed more equitably. My Ph.D. is in an interdisciplinary discipline called Science and Technology Studies - a field that studies the intricate ways science, technology, culture, and politics all co-constitute each other. I work on a number of collaborative research projects that leverage public data to deepen understanding of social and environmental inequities in the US, while also qualitatively studying the politics behind data gaps and inconsistencies. As an instructor, I prioritize active learning and often structure courses as flipped classrooms. You can expect in-class time to predominantly involve group activities and live problem-solving exercises.\n\n\n\nSwaha Bhattacharya\n\n\n\nSlackMeeting with Me\n\n\nI can best support students in this course when I can readily keep tabs on our course-related communication. Because of this, I ask that you please don’t email me regarding course-related questions or issues. The best way to get in touch with me is via our course Slack. If you have course-related questions, I encourage you to ask them in the #sds-410-questions channel. When discretion is needed, feel free to DM. Please reserve more formal concerns like grades or accommodation requests for an in-person (or in-person virtual) conversation.\nDuring the week, I will try my best to answer all Slack messages within 24 hours of receiving them. Please note that to maintain my own work-life balance, I often don’t answer Slack messages late in the evenings or on the weekends. It’s important that you plan when you start your assignments accordingly.\n\n\nMeeting with me outside of class is a great opportunity for us to chat about what you’re learning in the course, clarify expectations on assignments, and review work in progress. I also love when students drop in to office hours to request book recommendations, discuss career or research paths, or just to say hi!\nThere are two ways to meet with me. If you would like to have a one-on-one private conversation, I ask that you schedule an appointment with me via the booking form on Moodle. For support on class topics, you may drop-in during my regularly scheduled office hours.\nMonday, 11-12, Sabin-Reed 331 Tuesday, 11-12, Sabin-Reed 331 Thursday, 11-12, Sabin-Reed 331\n\n\n\n\n\n\n\nThis semester we will be reading selections from two books Discriminating Data: Correlation, Neighborhoods, and the New Politics of Recognition by Wendy Hui Kyong Chun and Data Cartels: The Companies That Control and Monopolize Our Information by Sarah Lamdan. The books should be available at the Smith bookstore.\n\n\n\nThis course will be graded via self-assessment.\n\n\n\n\n\n\nWurtele Center\n\n\n\nSmith’s Wurtele Center is tremendously supportive of this course. Megan Lyster at the Wurtele Center will help facilitate some collaboration workshops in our course and help teams reflect on how collaborations are progressing. I encourage you to check out their resources and events.\n\n\n\n\n\n\nPreparationAttendanceExtensionsAcademic Honesty\n\n\nThis is a 4-credit course with 3 hours per week of in-classroom instructions. Smith expects students to devote 9 out-of-class hours per week to 4-credit classes. I have designed the course assignments and selected the course readings with this target in mind.\n\n\nAttendance is essential in this course as you will be completing project work in-class with peers. If you must miss a class please inform me via Slack. Please note that the SDS Program has adopted a shared policy regarding in-person attendance this semester:\n\nIn keeping with Smith’s core identity and mission as an in-person, residential college, SDS affirms College policy (as per the Provost and Dean of the College) that students will attend class in person. SDS courses will not provide options for remote attendance. Students who have been determined to require a remote attendance accommodation by the Office of Disability Services will be the only exceptions to this policy. As with any other kind of ADA accommodations, please notify your instructor during the first week of classes to discuss how we can meet your accommodations.\n\n\n\nThere is a 24-hour grace period on all written assignments. There will be no penalties for submitting the written assignment within this 24-hour period, and you do not need to inform me that you intend to take the extra time. You can also request up to a 72-hour extension on any written assignment, as long as you make that request at least 48 hours before the original assignment due date. You can request an extension by filling out the Extension Request form on Moodle, and I will confirm your extension on Slack. Beyond this, late assignments will not be accepted.\n\n\n\nSmith College expects all students to be honest and committed to the principles of academic and intellectual integrity in their preparation and submission of course work and examinations. Students and faculty at Smith are part of an academic community defined by its commitment to scholarship, which depends on scrupulous and attentive acknowledgement of all sources of information, and honest and respectful use of college resources. Any cases of dishonesty or plagiarism will be reported to the Academic Honor Board. Examples of dishonesty or plagiarism include:\n\n\nSubmitting work completed by another student as your own.\nCopying and pasting words from sources without quoting and citing the author.\nParaphrasing material from another source without citing the author.\nFailing to cite your sources correctly.\nFalsifying or misrepresenting information in submitted work.\nPaying another student or service to complete assignments for you.\nSubmitting work generated by artificially intelligent tools such as chatGPT.\n\n\n\n\n\n\n\n\nCode of ConductPrinciples of CommunityPronouns\n\n\nAs the instructor for this course, I am committed to making participation in this course a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion. Examples of unacceptable behavior by participants in this course include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\nAs the instructor I have the right and responsibility to point out and stop behavior that is not aligned to this Code of Conduct. Participants who do not follow the Code of Conduct may be reprimanded for such behavior. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the instructor.\nAll students and the instructor are expected to adhere to this Code of Conduct in all settings for this course: seminars, office hours, and over Slack.\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available here.\n\n\nI hope that we can foster a collaborative and caring environment in this classroom: one that celebrates successes, respects individual strengths and weaknesses, demonstrates compassion for each other’s struggles, and affirms diverse identities. Here are some ideas that I have for creating this environment in our course:\n\nCheck-in with colleagues before starting collaborative work. “What three words describe how you’re feeling?” “Name one challenge and one success from this week.” “What are you doing for self-care right now?” Thank each other for sharing where they’re at.\nConsider when to step up and when to step back in class discussions, creating space for others to contribute. Listening is just as important to community-building as speaking.\nAcknowledge that there is much we don’t know about how our colleagues experience the world. …but don’t ask colleagues to speak on behalf of a social group you perceive them to be a part of.\nCheer on colleagues as they give presentations or try something out for the first time.\nAsk questions often in our #sds-410-questions channel. Help each other out by answering questions when you can.\nMistakes happen. I will certainly make mistakes in class. Admit mistakes, and then move on.\n\n\n\nUsing the proper pronouns for our students is foundational to a safe, respectful classroom environment that creates a culture of trust. For information on pronouns and usage, please see the Office of Equity and Inclusion link here: Pronouns\n\n\n\n\n\n\n\nAccommodationsStudent Well-beingTrigger Warnings\n\n\nIt is my goal for everyone to succeed in this course. If you have personal circumstances that may impact your experience of our classroom, I encourage you to contact Office of Disability Services in College Hall 104 or at ods@smith.edu. The Office will generate a letter that indicates to me what kind of support you need and how I can make your classroom experience more accommodating. Once you have this letter, you are welcome to visit my office hours or email me to discuss ideas about how we can tailor the course accordingly. While you can request accommodations at any time, the sooner we start this conversation, the better. If you have concerns about the course that are not addressed through ODS, please contact me. At no point will I ask you to divulge details about your personal circumstances to me.\n\n\nCollege life is stressful, and life outside of college can be overwhelming. It is my position that attending to your physical and mental health and well-being should be a top priority. I will remind you of this often throughout the semester. I encourage you to schedule a time to talk with me if you are struggling with this course. If you, or anyone you know, is experiencing distress, there are numerous campus resources that can provide support via the Schacht Center. I can point you to these resources at any time throughout the semester.\n\n\nA trigger is a topic or image that can precipitate an intense emotional response. When common triggering topics are to be covered in this course, I will do my best to provide a trigger warning in advance of the discussion. However, I can’t always anticipate triggers. With this in mind I’ve set up an anonymous form, available on Moodle, where you can indicate topics for which you would like me to provide a warning.\n\n\n\n\n\n\n\nMoodleSlackGitHub\n\n\nGrades, forms, and handouts will be available on the course Moodle.\n\n\n\n#general: Course announcements (only I can post)\n#sds-410-discussions: Share news articles and relevant opportunities\n#sds-410-questions: Ask and answer questions about our course\nYou can also create private Slack channels with your project group members.\n\n\n\nI will be using GitHub Classroom to distribute several course assignments, and you will submit assignments by pushing changes to template documents to a private GitHub repository. I will provide guidance on how to do this early in the semester.\n\n\n\n\n\n\n\n\n\nRStudio/RStudio Server\n\n\n\nThis class will use the R statistical software package. In the first week of the course, I will help you install and configure R and RStudio. If you are using a laptop, you will install both on that computer. If you are using a Chromebook or Tablet, an account will be created for you on the Smith College RStudio Server so that you can access a cloud-based version of RStudio. You should let me know in the first week of the course if you are using a Chromebook or tablet."
  },
  {
    "objectID": "grading_contract.html",
    "href": "grading_contract.html",
    "title": "Self-Assessment",
    "section": "",
    "text": "Your grade for this course will be determined by formal, written self-assessments of your work along seven dimensions. The dimensions are as follows:"
  },
  {
    "objectID": "grading_contract.html#how-will-self-assessments-work",
    "href": "grading_contract.html#how-will-self-assessments-work",
    "title": "Self-Assessment",
    "section": "How will self-assessments work?",
    "text": "How will self-assessments work?\n\nJournal\nEach week you will keep a log in GitHub, listing specific examples of how you’ve demonstrated growth along each of these seven dimensions. While I will not be formally reviewing these logs, I highly encourage you to stay on top of them in preparation for the mid-semester and final assessments.\n\n\nMid-Semester Assessment\nBefore leaving for Spring Break, you will write-up a 700-800-word mid-semester assessment of your work, grading yourself along each of the seven dimensions. For each dimension, you will develop an argument for why you should receive a particular grade (A, B, C, D, etc), drawing evidence from your log to support your argument. Your assessment should conclude by reflecting on areas for improvement in the second half of the semester.\nI want you to think of this assignment as an opportunity to generate material that you might reference when preparing job or graduate school materials. In cover letters and interviews, you may be expected to recall and detail specific instances where you demonstrated professionalism, where you learned to manage conflict in a collaboration, or where you overcame a challenge in project management. I’m asking you to provide specific examples in support of a grade, not only as proof of why you deserve that grade, but also because it will give you practice in effective self-advocating.\n\n\nFinal Assessment\nAt the end of the semester, you will write-up a final 1000-word assessment of your work in the course, grading yourself along each of the seven dimensions and providing evidence in support of a final grade. While you may reference examples that were included in the mid-semester assessment, this final assessment should be treated as a separate document than the mid-semester assessment, not a revision of it."
  },
  {
    "objectID": "grading_contract.html#what-work-will-i-be-expected-to-complete-to-pass-the-course",
    "href": "grading_contract.html#what-work-will-i-be-expected-to-complete-to-pass-the-course",
    "title": "Self-Assessment",
    "section": "What work will I be expected to complete to pass the course?",
    "text": "What work will I be expected to complete to pass the course?\nThere are three categories of assignments in this course, and you will be expected to meet minimum completion requirements in all of them to pass the course.\n\nSponsored Project Assignments\nYour sponsored project will ultimately include a GitHub repository of code deliverables and a group project report. You will also be expected to deliver a mid-term presentation and final presentation, reporting on your team’s progress. To help you spread out the development of these products over the semester, I’ve broken out the final report into smaller chunks of writing to be submitted weekly. At a minimum, you must submit a final report and deliver a mid-term and final presentation to pass the course.\n\n\nReadings\nEvery two weeks, you will be expected to come to class having completed course readings. Every project team will be assigned to develop a discussion plan for one assigned reading and to lead one reading discussion. At a minimum, you must contribute to a discussion plan and help lead a reading discussion to pass the course.\n\n\nSelf-Assessments\nAt mid-semseter and at the end of the semester, you will be expected to submit individual written self-assessments of your work. At a minimum, you must submit both self-assessments to pass the course."
  },
  {
    "objectID": "schedule.html#january-26-2023",
    "href": "schedule.html#january-26-2023",
    "title": "Schedule",
    "section": "January 26, 2023",
    "text": "January 26, 2023\n\nProject Faire\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#january-31-2023",
    "href": "schedule.html#january-31-2023",
    "title": "Schedule",
    "section": "January 31, 2023",
    "text": "January 31, 2023\n\nGitHub\n\nDue TodayFurther Resources\n\n\n GitHub Set-up\n Resume\n Project Rankings\n Project Proposals\n\n\n GitHub Workshop Instructions"
  },
  {
    "objectID": "schedule.html#february-02-2023",
    "href": "schedule.html#february-02-2023",
    "title": "Schedule",
    "section": "February 02, 2023",
    "text": "February 02, 2023\n\nWorking with Sponsors\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#february-07-2023",
    "href": "schedule.html#february-07-2023",
    "title": "Schedule",
    "section": "February 07, 2023",
    "text": "February 07, 2023\n\nCollaboration\n\nDue TodayFurther Resources\n\n\n Introduction Email to Client\n Agenda Templates"
  },
  {
    "objectID": "schedule.html#february-09-2023",
    "href": "schedule.html#february-09-2023",
    "title": "Schedule",
    "section": "February 09, 2023",
    "text": "February 09, 2023\n\nProblem Statements and Project Scoping\n\nDue TodayFurther Resources\n\n\n Chapter 1 (DDP) , Chun, Wendy Hui Kyong (2021). Discriminating Data: Correlation, Neighborhoods, and the New Politics of Recognition. Cambridge, Massachusetts: The MIT Press. ISBN: 978-0-262-04622-0."
  },
  {
    "objectID": "schedule.html#february-14-2023",
    "href": "schedule.html#february-14-2023",
    "title": "Schedule",
    "section": "February 14, 2023",
    "text": "February 14, 2023\n\nSCRUM Models\n\nDue TodayFurther Resources\n\n\n Collaboration Protocols\n Problem Statement, Scope, and Plan"
  },
  {
    "objectID": "schedule.html#february-16-2023",
    "href": "schedule.html#february-16-2023",
    "title": "Schedule",
    "section": "February 16, 2023",
    "text": "February 16, 2023\n\nCode Styling\n\nDue TodayFurther Resources\n\n\n\n\n\n Code Style Guides"
  },
  {
    "objectID": "schedule.html#february-21-2023",
    "href": "schedule.html#february-21-2023",
    "title": "Schedule",
    "section": "February 21, 2023",
    "text": "February 21, 2023\n\nProject Management Tools and Tasking\n\nDue TodayFurther Resources\n\n\n Chapter 2 (NIEER) , Chun, Wendy Hui Kyong (2021). Discriminating Data: Correlation, Neighborhoods, and the New Politics of Recognition. Cambridge, Massachusetts: The MIT Press. ISBN: 978-0-262-04622-0.\n Client Description and Data Description"
  },
  {
    "objectID": "schedule.html#february-23-2023",
    "href": "schedule.html#february-23-2023",
    "title": "Schedule",
    "section": "February 23, 2023",
    "text": "February 23, 2023\n\nRally Day\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#february-28-2023",
    "href": "schedule.html#february-28-2023",
    "title": "Schedule",
    "section": "February 28, 2023",
    "text": "February 28, 2023\n\nRetrospective 1\n\nDue TodayFurther Resources\n\n\n Code Style Guide"
  },
  {
    "objectID": "schedule.html#march-02-2023",
    "href": "schedule.html#march-02-2023",
    "title": "Schedule",
    "section": "March 02, 2023",
    "text": "March 02, 2023\n\nWorking Day\n\nDue TodayFurther Resources\n\n\n Chapter 3 , Chun, Wendy Hui Kyong (2021). Discriminating Data: Correlation, Neighborhoods, and the New Politics of Recognition. Cambridge, Massachusetts: The MIT Press. ISBN: 978-0-262-04622-0."
  },
  {
    "objectID": "schedule.html#march-07-2023",
    "href": "schedule.html#march-07-2023",
    "title": "Schedule",
    "section": "March 07, 2023",
    "text": "March 07, 2023\n\nMid-Term Presentations\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#march-09-2023",
    "href": "schedule.html#march-09-2023",
    "title": "Schedule",
    "section": "March 09, 2023",
    "text": "March 09, 2023\n\nMid-Term Presentations\n\nDue TodayFurther Resources\n\n\n 1-page Summary of Project Progress"
  },
  {
    "objectID": "schedule.html#march-21-2023",
    "href": "schedule.html#march-21-2023",
    "title": "Schedule",
    "section": "March 21, 2023",
    "text": "March 21, 2023\n\nCode Review\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#march-23-2023",
    "href": "schedule.html#march-23-2023",
    "title": "Schedule",
    "section": "March 23, 2023",
    "text": "March 23, 2023\n\nDocumentation\n\nDue TodayFurther Resources\n\n\n Chapter 4 (Candlewood) , Chun, Wendy Hui Kyong (2021). Discriminating Data: Correlation, Neighborhoods, and the New Politics of Recognition. Cambridge, Massachusetts: The MIT Press. ISBN: 978-0-262-04622-0.\n Mid-term Assessment"
  },
  {
    "objectID": "schedule.html#march-28-2023",
    "href": "schedule.html#march-28-2023",
    "title": "Schedule",
    "section": "March 28, 2023",
    "text": "March 28, 2023\n\nRticles\n\nDue TodayFurther Resources\n\n\n Detailed Methodology"
  },
  {
    "objectID": "schedule.html#march-30-2023",
    "href": "schedule.html#march-30-2023",
    "title": "Schedule",
    "section": "March 30, 2023",
    "text": "March 30, 2023\n\nReport Genres\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#april-04-2023",
    "href": "schedule.html#april-04-2023",
    "title": "Schedule",
    "section": "April 04, 2023",
    "text": "April 04, 2023\n\nWorking Day\n\nDue TodayFurther Resources\n\n\n Introduction and Chapter 1 , Lamdan, Sarah (2022). Data Cartels: The Companies That Control and Monopolize Our Information. 1st edition. Stanford, California: Stanford University Press. ISBN: 978-1-5036-3371-1.\n ReadME"
  },
  {
    "objectID": "schedule.html#april-06-2023",
    "href": "schedule.html#april-06-2023",
    "title": "Schedule",
    "section": "April 06, 2023",
    "text": "April 06, 2023\n\nWorking Day\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#april-11-2023",
    "href": "schedule.html#april-11-2023",
    "title": "Schedule",
    "section": "April 11, 2023",
    "text": "April 11, 2023\n\nRetrospective 2\n\nDue TodayFurther Resources\n\n\n Findings/Outputs"
  },
  {
    "objectID": "schedule.html#april-13-2023",
    "href": "schedule.html#april-13-2023",
    "title": "Schedule",
    "section": "April 13, 2023",
    "text": "April 13, 2023\n\nWorking Day\n\nDue TodayFurther Resources\n\n\n Chapter 2 and 3 , Lamdan, Sarah (2022). Data Cartels: The Companies That Control and Monopolize Our Information. 1st edition. Stanford, California: Stanford University Press. ISBN: 978-1-5036-3371-1."
  },
  {
    "objectID": "schedule.html#april-18-2023",
    "href": "schedule.html#april-18-2023",
    "title": "Schedule",
    "section": "April 18, 2023",
    "text": "April 18, 2023\n\nTransition Planning\n\nDue TodayFurther Resources\n\n\n Draft Final Report"
  },
  {
    "objectID": "schedule.html#april-20-2023",
    "href": "schedule.html#april-20-2023",
    "title": "Schedule",
    "section": "April 20, 2023",
    "text": "April 20, 2023\n\nMicro-Ethics Statements\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#april-25-2023",
    "href": "schedule.html#april-25-2023",
    "title": "Schedule",
    "section": "April 25, 2023",
    "text": "April 25, 2023\n\nMacro-Ethics Statements\n\nDue TodayFurther Resources\n\n\n Conclusion , Lamdan, Sarah (2022). Data Cartels: The Companies That Control and Monopolize Our Information. 1st edition. Stanford, California: Stanford University Press. ISBN: 978-1-5036-3371-1."
  },
  {
    "objectID": "schedule.html#april-27-2023",
    "href": "schedule.html#april-27-2023",
    "title": "Schedule",
    "section": "April 27, 2023",
    "text": "April 27, 2023\n\nFinal Projects\n\nDue TodayFurther Resources\n\n\n Ethics Statement"
  },
  {
    "objectID": "schedule.html#may-02-2023",
    "href": "schedule.html#may-02-2023",
    "title": "Schedule",
    "section": "May 02, 2023",
    "text": "May 02, 2023\n\nFinal Projects\n\nDue TodayFurther Resources"
  },
  {
    "objectID": "schedule.html#may-04-2023",
    "href": "schedule.html#may-04-2023",
    "title": "Schedule",
    "section": "May 04, 2023",
    "text": "May 04, 2023\n\nReflections\n\nDue TodayFurther Resources\n\n\n Final Report\n Final Assessment"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "There are many reasons that Git and GitHub are essential infrastructures for collaborative coding projects. For one Git saves snapshots of a code repository at different stages of a project so that we can track how it has changed over time and revert back to an older version if we discover a more recent error. We call this version control. Certain Git features also facilitate many people working on a coding project at once, by providing a number of tools to help prevent collaborators from over-writing each other’s work. These features also make it possible for developers to simultaneously modify, extend, and test components of the code without jeopardizing the project’s current functionality. I use GitHub for assignment submission in this course because it offers a number of features for commenting on and making suggestions in your code, which will be super helpful when reviewing your group projects. Further, GitHub supports code publication; by publishing code on GitHub, you contribute to an open access/free software community, enabling others to learn from and build off of your work.\nDespite all of these awesome benefits, there can be a significant learning curve when getting started with Git and GitHub. There are new vocabularies, workflows, and error mitigation strategies to learn when getting started. This lab is designed to help you get acquainted with the concepts behind Git and GitHub, suggested workflows for collaborating on projects in this course, and error resolution strategies.\n\n\n\nCreate, update, and close issues\nBranch a repo\nIssue pull requests\nAddress common push/pull errors\nAddress merge conflicts"
  },
  {
    "objectID": "github.html#review-of-key-terms",
    "href": "github.html#review-of-key-terms",
    "title": "Git and GitHub",
    "section": "Review of Key Terms",
    "text": "Review of Key Terms\n\nRepo\n\nCollaborative storage space for folders, documents, data, and code\n\nBranch\n\nAn isolated version of a repo that can be modified without affecting the main branch\n\nClone\n\nCreates a copy of a repo stored in a remote space (e.g. GitHub) to your local machine (e.g. your computer)\n\nPull\n\nDownloads the latest version of a repo from remote space (e.g. GitHub) to your local machine (e.g. your computer)\n\nStage\n\nThe process of marking which changes of the code are ready to be saved\n\nCommit\n\nA stored snapshot of a repo at a particular moment in time\n\nPush\n\nUploads commits from your local machine (e.g. your computer) to a remote space (e.g. GitHub)\n\nPull Request\n\nA request for modified code to be integrated with a different branch\n\nMerge\n\nThe process of integrating code modifications from one branch into another branch"
  },
  {
    "objectID": "github.html#github-flow",
    "href": "github.html#github-flow",
    "title": "Git and GitHub",
    "section": "GitHub Flow",
    "text": "GitHub Flow\n\ngit vs. GitHub.com\ngit is a series of commands available in our computers to save snapshots of files at different moments in time. On the other hand, GitHub.com is a website where we can store projects that have been configured with git commands. As you’ve been accepting assignments for this course, project folders (what we will call repositories) have been created for you at GitHub.com. If you navigate to GitHub.com right now, you will see a list of these project folders, and you can click through each of the them to see changes that have been made. However, when you created projects for each of these repositories in RStudio, you were using git commands on your computer to copy the project from GitHub.com to your computer. Similarly, you were using git commands when you staged, committed, and pushed your changes back to GitHub.com. In sum, git is a series of command line tools to manage changes to files. GitHub.com is a Web hosting platform for storing git projects.\n\n\nRemote vs. Local\nWe can store, edit, and publish files on GitHub.com without ever copying them to our local computers. Files at GitHub.com are technically stored on a server somewhere, so we will refer to the projects stored at GitHub.com as remote (i.e. distant, far-off, etc). Similarly, we can use git commands to save snapshots of different versions of files on our local computers without ever pushing the changes to GitHub.com, so we will refer to the projects stored on on our computers as local. In this course, we need the ability to move changes to files between our local and remote repositories.\nWhy can’t we just do everything at GitHub.com or everything on our local machines?? Well GitHub.com doesn’t have the nice environment for writing and running code that you have in RStudio, so we need to be able to move things to your local computers so that you can work on the code in RStudio. On the other hand, if all the work was done on your local computer and never pushed to GitHub.com, I (your instructor) would never see it! So the first important consideration in the GitHub Flow is how do we move changes made on our local machines to GitHub.com and vice versa.\nThe great news is that you’ve already been doing this! The primary way that we move changes between remote and local is through two git commands: pull and push. Pull copies changes from a remote repository to our local machines. Push pushes changes from our local machines to a remote repository. It looks like this:\n\nTypically, we want to make sure that we always follow this flow:\n\nPull changes from GitHub.com (remote) to local.\nMake changes locally,\nPush changes to GitHub.com.\n\nAs we are going to see later in the lab, the most frustrating issues with GitHub emerge when we break this flow.\n\n\nTo Branch or Not to Branch?\nIn my opinion, there are two kinds of workflows for GitHub. There’s the quick and dirty version, and there’s the long and elegant version. We just went over the Quick and Dirty version, and you’ve already had practice in it when submitting all of your labs for the course. Below are the differences between these two workflows (don’t worry about if you don’t understand what the steps mean right now; we will learn all of them in the lab).\n\n\n\n\n\n\n\nQuick and Dirty Version\nLong and Elegant Version\n\n\n\n\n\nPull recent changes from GitHub to local machine.\nMake edits and save them\nStage and commit changes.\nPush changes from local machine to GitHub.\n\nIn the quick and dirty version, all of this occurs in the main branch.\n\nCreate an issue at GitHub.com\nBranch the repo at GitHub.com.\nPull recent changes from GitHub.com to local machine.\nMake edits in the new branch and save them.\nStage and commit changes.\nPush changes from local machine to GitHub.com.\nCreate a pull request at GitHub.com\nAssign a reviewer to review the proposed changes and wait for their approval.\nMerge changes, while also closing the issue and deleting the branch.\n\n\n\n\nTypically I recommend the long and elegant version for group work as it is designed to avoid errors and ensure that collaborators are all on the same page regarding changes to files. However, occasionally when you have to make small, quick changes to a file, and it won’t impact your teammate’s work, it will make more sense to follow the quick and dirty workflow. The goal for today is to get practice in the long and elegant version.\n\n\nRepo\n\nQuestion\n\nNavigate to GitHub Classroom to accept the assignment. For this assignment, you will work in teams of 3 at most.\n\n\n\nThis will create a repository at GitHub.com called github-practice. You’ll notice that the repository has a few files - README.md, github-practice.Rmd, .gitingore. You’ll also notice in the repo’s right sidebar that your group members are listed as collaborators. This means that you all have access to read and write to this repository.\n\n\n\n\nClone\nCloning is a git command that copies a remote repository to your local machine. In other words, it will copy all of the project files in the remote GitHub.com folder to your local computer.\n\nQuestion\n\nAll group members should clone the repo to their RStudio environment. To do so, copy the repo’s URL at GitHub.com. You will want to make sure you are in the main project folder when you copy this URL; it won’t work if you’ve clicked through to any of the files. Then in RStudio click on File > New Project > Version Control > Git, and paste the copied URL into the window that appears. Note what you see in the RStudio files pane after cloning the repo.\n\n\n\nRemember that cloning creates a copy of a remote repo on a local machine. In creating this project, you’ve copied all of the files that make up the github-practice repo at GitHub.com to your local computer. This means that you will find all of the files associated with this repo by navigating to the folder where you created the project on your computer.\nIt’s important to note that this is not just any old folder on your computer though. By cloning, you’ve created a git folder. This means that the folder has been set up in a way where git can track the changes that you make to it over time, and it knows that there is a remote version of the repository somewhere that you might want to keep it consistent with. If you tried to just create a new folder on your computer, it wouldn’t necessarily have these nice features.\n\n\n\n\nIssues\n\nQuestion\n\nNavigate back to GitHub.com, and click on the repo’s Issues tab. Each member of your team should create an issue by clicking the ‘New Issue’ button. Title the issue: “Adding <your name> to the assignment.” Submit the issue, and to the left of the screen, assign the issue to yourself.\n\n\n\n\nIssues support project planning by allowing you to track changes you hope to make to your project over time. By assigning issues to certain collaborators on your project team, you can have clear documentation of who is responsible for what.\n\n\n\n\n\n\nTip\n\n\n\nIn my own projects, I use Issues for a number of purposes. Sometimes I use Issues to bugs that I notice in my code that need to be fixed. Other times I use them to track features that I would like to add to my code down the road. Oftentimes, in my public repositories, I encourage others that are using my code to submit issues to ask questions about how something works, to report bugs, or to request features.\n\n\n\n\n\n\nBranch\nWhen you first create a repository, all of the code will be stored in the main branch of the repository. If you were to think of a project like a tree growing up from the ground, then the main branch would be the like the trunk of the tree. We don’t want the main branch to break because the whole tree could come down. One goal of a branching workflow in GitHub is to keep the most stable and polished versions of code in the main branch.\nSo what do we do in the meantime - when we’re editing code, potentially breaking things, trying to sort out its bugs, and it’s not quite in that stable and polished state yet? That’s where branching comes in.\nWhen we create a branch of our repo, GitHub creates a separate copy of the repo where you can make changes without impacting what’s in the main branch. Later, once we’re done making changes and things are stable and polished, we will have the opportunity to merge those changes back into the main branch.\nThink of it another way: You write a rockstar first draft of a final paper, and you decide to send it to a few friends to review. You could just share the original document with them and tell them “Have at it! Edit away!” The problem is that, if they are making changes directly to the original document, you could lose some of that awesome original text. A better option would be to create separate copies for each teammate to edit, send them those copies, and then figure out how to layer in their edits later. This is like branching. The original document would be the main branch, and each copy sent to a friend would be a branch off of main. Friends can make as many edits as they want in their branch because you still have the original stable and polished copy. Later, we can merge their changes back into the main branch.\n\n\n\n\n\n\n\nTip\n\n\n\nBranching can get pretty wild in GitHub. You can have branches of branches of branches. I don’t recommend this. A good workflow is to create a branch for making specific changes, merge those changes back into main, delete the branch, and then create a new branch for the next batch of changes.\n\n\n\nQuestion\n\nClick on the Code tab on your repo’s page at GitHub.com. Directly below this tab, you will see a dropdown that is currently labeled “main.” This means that you are in the main branch. Each member of your team should click the down arrow, and create a branch by entering their first name into the textbox that appears, and then clicking “Create branch.”\n\n\n\n\n\nPull\nAs of right now, the branches that were created in the previous step only exist on GitHub.com, they don’t exist yet on your local machine. To get these changes to your local machine, you need to Pull the changes. Remember how we said that the super fancy git folder knows that there is a remote version of the repository somewhere that you might want to keep it consistent with? When we pull changes to our local machines, we are basically saying, check that remote version for changes, and then pull them into the repo on my computer.\n\nQuestion\n\nHead back to RStudio. In the Environment pane, you will notice a tab labeled “Git.” It’s important to note that this tab will only appear in projects that are built from super fancy git folders. This is your RStudio command center for Git and GitHub. When you click on this tab, you will see a few buttons in the navigation bar. To pull changes, you should click the blue downward arrow. Click this button to pull the branches created remotely to your local machine.\n\n\n\n\n\nSwitch Branches\nEven though you pulled the new branches to your local machine, you are still currently working in the main branch. Remember that we always want to keep the main branch stable and polished. This is not where we are going to make edits. Instead, you will make edits in the branch that you just created. Later, we will merge those changes back into the main branch.\n\nQuestion\n\nIn the top right hand corner of the Git tab, you will see a dropdown currently set to “main”. Click the downward arrow, and switch to your branch by selecting the appropriate branch.\n\n\n\n\n\nMake Changes\n\nQuestion\n\nOnce in your branch, open github-practice.Rmd from the files pane. Decide within your group who will be Group member 1, 2, 3, and so on. Each group member should edit this file on their own local machines by adding their name and only their name to the appropriate location in the document (line 5, 7, or 9) based on their assigned number. It’s very important that this be the only section of the document you edit. Save the file by clicking File>Save.\n\n\n\n\nStage\nSometimes we make a changes to a few files, save them, and we’re ready to create a snapshot of our repo (i.e. create a commit) with some of those changes. Remember that creating this snapshot is almost like taking a photo of the repo at this particular moment, allowing us to later go back to that photo to see what the repo looked like in that moment. To let Git know which changes we want to include in that snapshot, we need to stage the files. Staging basically says, “these files are ready to be included in the snapshot.”\n\nQuestion\n\nOnce you save the file you’ll notice in the RStudio Git pane that the file name appears after a blue square labeled “M” (which stands for Modified). This means that the file is ready for staging. Stage the file - indicating that it’s ready for committing - by clicking the checkbox in front of the file name.\n\n\n\n\n\nCommit\nAs we just noted, committing changes basically means taking a snapshot of a repo at a particular moment in time. Commits are given unique hashes - sort of like a unique identifier that enables us to access the snapshot of the repo at a later date. In collaborative projects, it is typically recommended to commit often - after any major changes are made to a file. This ensures that we can eventually go back to look at very specific changes. It’s also important to label commits with descriptive titles so that we can recall what changes within that commit. Descriptive titles should detail what changes were made in the last round of edits.\nTo help put this into context, think back to our photograph metaphor. Let’s say that we are a photographer assigned to document how a baby develops in the first year of its life. If the photographer only took one photograph when the baby was 1 year old, we wouldn’t have a lot of documentation regarding how the baby developed! …so instead, let’s say that the photographer took a snapshot of the baby after every major milestone - their first laugh, their first solid food, their first crawl, their first word. We would have a lot more to go by when trying to understand how the baby developed. Same goes for committing code often.\nNow let’s say the photographer handed the batch of photos to the parents, and said - “look, here’s how your baby developed over time.” The parents might not remember which photograph was taken after which milestone. …but if the photographer were to label each photograph with things like “baby had first laugh,” the parents would be able to easily go back to specific moments in their baby’s development. This is why we want descriptive commit messages. We want to later be able to go back and scan through what changes were made after each commit.\nTo get a sense of what it means to be able to look back on these changes, check out the latest commits that I made to the GitHub repo for our course website. While I’m not going to claim to be the most diligent commit-er, you do get a basic sense of what changes were made to the repo following each commit from these commit messages. I could click through any of these links to see what my repo looked like at this moment in time.\n\n\nQuestion\n\nCommit your changes by clicking the ‘Commit’ button in the Git pane. When you click this button, a new window will open showcasing the changes that have been made to the staged file. You should enter a commit message in the window that appears. Remember that commit messages should be descriptive. In this case, something like “added <your-name>’s name” would work. Click commit. Now a snapshot of this version of the code repo has been taken.\n\n\n\n\nPush\nOnly your local machine knows that a change has been made to the code. Remember again how we said that the super fancy git folder knows that there is a remote version of the repository somewhere that you might want to keep it consistent with? Now we want to do the opposite of pulling changes from GitHub to our local machines. Instead, we want to push the changes on our local machines to GitHub.\n\nQuestion\n\nClick the Green upward arrow in the Git pane to push your changes to GitHub.\n\nOnce all group members have pushed their changes, head back over to GitHub. On the main code page, switch between branches and check out the contents of github-practice.Rmd in each branch. What differences do you notice?\n\n\n\n\nPull Request\nNote that now we have a few versions of our repo in separate branches on GitHub.com, and in each of those versions of the repo, the github-practice.Rmd file looks a little bit different. Now that we’ve made our changes and things are stable and polished, we want to move all of those changes into the main branch. To do this, we are going to issue a Pull Request. This is a request that signals to all of our collaborators that we are ready to move our changes back into the main branch.\n\nQuestion\n\nOn your repo’s page in GitHub.com, click the “Pull Requests” tab, and then click the green “New Pull Request” button. You’re requesting to pull the changes from your personal branch into the main branch. This means that the base branch should be main, and the compare branch should be your personal branch.\n\nYou’ll see a screen where you can compare your branch to the main branch. Click the button to “Create Pull Request,” enter a descriptive title of the changes made, and then click “Create Pull Request” again.\n\n\n\n\nReview Pull Requests\nI recommend that you get in the habit of reviewing your collaborator’s work before merging their changes into the main branch. By creating pull requests, we scaffold an opportunity to review each other’s work before fully integrating the changes.\nNow there should be a pull request for all members of your team. Assign one team member to review one other team member’s code. All team members should have one reviewer.\n\nQuestion\n\nOpen your own pull request in GitHub.com, and in the right sidebar, assign the team member responsible for reviewing your changes as a “Reviewer.”\n\nThen navigate to the pull request you are responsible for reviewing. Click on the “Files Changed” tab. Note that the left side of the screen shows the previous version of the file, and the right side of the screen shows the new version of the file. Lines in red have been deleted, and lines in green have been added.\n\nAfter looking through the changes, click the green button “Review changes.” Leave a note for your collaborator, indicating your evaluation of their changes. If everything looks good, check the radio button for “Approve.” If there are issues, check the radio button for “Request Changes.” Then click the button to “Submit Review.”\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf your reviewer requested changes, you should go back to RStudio, and make sure you are in your own branch. Then make the requested changes, save the file, stage the file, commit the changes, and push again. The changes to your file will be tracked in your pull request. After this, you may move on to the Merge step. See here for further options on dismissing or re-requesting reviews.\n\n\n\n\n\n\nMerge\nOnce all reviewers have approved changes, we are ready to merge those changes into the main branch. Open each pull request. If everything is good and ready to merge, you will see a green checkmark that says “This branch has no conflicts with the base branch.”\n\n(If you get a message that there are conflicts, call myself or the Pedagogical Partner over.)\n\nQuestion\n\nClick the button to “Merge Pull Request”. In the comment box that appears, enter the text “closes #”. When you enter this text, you will see a dropdown of issues and pull requests currently in the repo. Issues will have an icon that appears as a circle with a dot in the center.\n\nSelect the issue associated with this pull request, and then click “Confirm Merge.” This will both merge the changes into the main branch and simultaneously close the issue you opened earlier. Finally, click the button to the delete the branch. Once this has been completed for all pull requests, head back over to the “Code” tab at GitHub.com, and check out github-practice.Rmd. What has happened to the file since merging the code? Navigate to the “Issues” tab. What has happened to the issues since confirming the merge?\n\n\n\n\n\n\n\n\n\nBefore moving on to the next section...\n\n\n\nYou’ve now deleted branches at GitHub.com that your local machines don’t know have been deleted. By default, RStudio does not delete branches locally that have been deleted remotely, even after pulling changes. We can fix this by entering the following line into our Terminals in RStudio:\ngit config --global fetch.prune true\nRestart RStudio, and then pull changes (branch deletions) to your local machine by clicking the blue downward arrow. To streamline things in the next section of the lab, we are going to work entirely in the main branch (something that I would otherwise not recommend)."
  },
  {
    "objectID": "github.html#error-resolution",
    "href": "github.html#error-resolution",
    "title": "Git and GitHub",
    "section": "Error Resolution",
    "text": "Error Resolution\nThe workflow presented above seems to work all fine and dandy. …but there are a number of factors that can impede this seamless workflow. In this final section of the lab, we will go over three kinds of errors that you might come across in the workflow above, and talk about how you would resolve them. I can almost guarantee that you will deal with some of these issues when working on your group projects, so I would encourage you to keep this lab handy when engaging in project work.\n\nPush error\nA push error occurs when we make changes to files on our local machines, and go to commit and push them to GitHub.com, but other changes had already been made to the file at GitHub.com that were not yet pulled into our local environments. We get an error because our local repo is inconsistent with the remote repo. To fix this error, we need to pull changes to our local machine, and try committing and pushing again. Let’s replicate this error:\n\nQuestion\n\nOne of your partners should navigate to the GitHub.com repository. Click on the file README.md. Click the pencil icon to edit the file. Replace the text: ADD NAME 1 HERE ADD NAME 2 HERE, and so on with your names. Scroll to the bottom of the page and commit changes noting in the message that your names were added.\nOther partner: Return to RStudio. Do not pull changes yet. Open github-practice.Rmd. On line 40 change the ncol() function to dim(). Save the file. Stage and commit your changes. Click the green upward arrow to push your changes. You should get an error that looks like this.\n\nFollow the steps above to resolve the error.\n\n\n\nAn easy way to avoid a push error is to always click the blue downward arrow to pull remote changes before starting to edit files on your local machine.\n\n\n\n\nPull error\nA pull error occurs when changes have already been made to the same location (the same line number) in both a remote file and a local file, and then we try to pull the changes from the remote repo to our local machines. As far as Git can tell, there are two options for what this line is supposed to look like, and it can’t tell which to prioritize. So Git recommends that, as a first step, we commit the changes that we made locally. It’s basically saying, let’s take a snapshot of your local repo as it looks right now, so that later we can figure out what to do about this conflict.\nIf this seems confusing imagine this: let’s say you write a paper, and you share it with one of your classmates to review. The classmate reads through it, makes suggested changes to the opening sentence, and sends it back you. …but, while your classmate was reviewing the paper, you were getting antsy about the paper deadline and started making your own edits to the paper, including edits to the opening sentence. Now you’re trying to incorporate the changes from your classmate’s review, and you’re not sure what to do about that opening sentence. As a first step, you have two options you can scrap your recent changes (maybe your classmate’s suggestions were better!) or you can save a separate copy of the file with your recent changes and figure out later how to resolve the differences. That’s exactly what we are going to do here:\nTo fix this error, you should stage and commit your local changes and then try pulling again. Let’s replicate this error:\n\nQuestion\n\nOne of your partners should navigate to the GitHub.com repository. Click on the file github-practice.Rmd. Click the pencil icon to edit the file. Replace the code on line 47 with the following: colnames(pioneer_valley_2013).\nScroll to the bottom of the page and commit changes noting in the message how you updated the function.\nOther partner: Return to RStudio. Do not pull changes yet. Open github-practice.Rmd. Replace the code on line 47 with the following: ncol(pioneer_valley_2013)\nSave the file. Click the blue downward button to Pull changes. You should get an error that looks like this.\n\nFollow the steps above to resolve the error.\n\n\n\n\nMerge conflict\nSo now we have these two snapshots of github-practice.Rmd, and they are in conflict with one another. If we try to push our changes back to GitHub.com, Git is not going to know what to do. Should the file at GitHub.com look like the version currently at GitHub.com, should it look like the snapshot that we just commit to our local machines, or should it look like something else entirely?\nLet’s return to the example of trying to incorporate a peer’s edits to a paper that you have recently made changes to. We have to figure out what to do about that opening sentence. Do we want our version, their version, or some combination of the two? This is what it is like to fix a merge conflict.\nTo fix this error, open the file with conflicts and edit the lines with conflict.\n\nQuestion\n\nOne of your partners should try to pull changes by clicking the blue downward arrow in RStudio. You will get an error that looks like this:\n{fig-alt=“This is the window that we see when we get a merge conflict. It says: CONFLICT (content): Merge conflict in README.md}\nTo fix this one your partners should open the file with the conflict. In this case it will be github-practice.Rmd. Scroll to the section of the file with the conflict. It will now look something like this:\n    <<<<<<< HEAD\n\n    ncol(pioneer_valley_2013)\n\n    =======\n\n    colnames(pioneer_valley_2013)\n\n    >>>>>>> ee175895783b64e0e1f696d9456be4c4c7c3f3bf\nThe code following HEAD represents the recent changes you made on your local machine, and the code right before the long string of characters represents the changes that were made in an earlier commit (the long string of characters is the commit hash). Decide what that line should look like and delete all other content. This means you must delete “<<<<<<< HEAD”, “=======”, and “>>>>>>> <long-hash>”, and you likely should delete at least one other line. Save the file, stage the file by clicking the checkbox next to the file in the Git page, and then commit your changes, and push them to GitHub.com.\n\n\n\n\n\n\n\n\n\nAvoiding Merge Conflicts\n\n\n\nYou may have noticed that the most frustrating merge conflicts tend to emerge when we have two people working on the same line of a repo’s file. The most effective way to avoid merge conflicts is to ensure that collaborators are working on different documents or different lines in a file. One way you might do this when starting to work on your group project is to open a file that you all plan to work on and having one of your team mates section off space of that file for different people to work. It might look something like this:\n\nOnce this change has been made, that group mate should stage, commit, and push the file to GitHub, and all other group mates should pull the change to their local machines.\n\n\n\n\n\n\nPath of Least Resistance\nI have been working with GitHub for years, and even to this day, I run into instances where things become so inconsistent between my local machine and the repo at GitHub.com that the fastest way to fix things is just to save local copies of the files that I’ve changed to somewhere else on my machine, delete the super fancy Git folder from its current location, and then re-clone the most up-to-date remote version to my local machine. Then I can figure out how I want to edit the most up-to-date version with my changes. This comic from XKCD captures this widely acknowledged solution beautifully:"
  },
  {
    "objectID": "reading-discussions.html",
    "href": "reading-discussions.html",
    "title": "Reading Discussions",
    "section": "",
    "text": "Ahead of class, the assigned team should develop 4-5 discussion questions (one per team member) related to the chapter’s arguments for discussion during class. Questions may:\n\nReflect on the chapter’s main arguments\nClarify or unpack a concept developed in the chapter\nConnect the chapter’s arguments to current events\nPrompt us to think about how the arguments impact our work/lives\n\nEach team member will be responsible for facilitating small group discussions on one of the questions the team developed. In class, we will split into 4-5 groups for 10-minute small group discussions - one group per question. Then we will switch up the groups and repeat this process again.\nThen we will come back together for the last 20 minutes; each team member will briefly report on what was discussed in the two small group discussions they facilitated, and finally we will open the room for class discussion (led by me or Swaha)."
  },
  {
    "objectID": "style-guides.html",
    "href": "style-guides.html",
    "title": "Style Guides",
    "section": "",
    "text": "When working on collaborative code projects, it can be helpful to come to some agreements ahead of time regarding how to compose code and how to make changes to code repositories. Today, we are going to think through some of these issues by generating a code style guide.\n\n\nStandard formatting conventions are important for organizing, managing, and sharing code. Conventions ensure that: \n\nIf you were to step away from the project and come back to it in 5 years, you would be able to understand and navigate the code quickly. \nIf you were to share the repository with another developer, the developer would be able to understand and navigate the code quickly.\n\nHere are some questions that you should consider as you draft this section of your style guide:\n\nWhat standards will you use for naming files? (e.g. underscores, dashes, etc.) How will you ensure that file names are easily differentiated by all team members?\nHow will files be organized into folders in your repo? What will the main folders be?\nWhat standards will you use for formatting object names in your code? (e.g. underscores, dashes, etc.) How will you ensure that object names are easily differentiated by all team members?\nHow will you comment code? Where should comments be placed in code? What will their purpose be? Do you expect full sentences?\nWhat are the expectations for white space in your code? Will you include spaces between each symbol/punctuation mark? What about parentheses?\nWhen will line breaks be added to the code?\nWhat standards will you use for code indentation?\n\n\n\n\nDeveloping standard processes for code writing and review will help ensure that team members are not overwriting each other’s work, that code is consistently being reviewed before inclusion in the repo, and that generally everyone understands their roles in the repo’s maintenance. It will also reduce merge conflicts. Here are some things to consider when drafting this portion of your style guide:\n\nWill code always be written in separate branches? How will branches be named?\nHow will collaborators work across files? What mechanisms will you put into place to mitigate merge conflicts when collaborators are working on the same files?\nShould there be a GitHub Issue associated with each pull request?\nHow often do you expect team members to commit their code? (e.g. after each substantive change; after changes to x lines of code)\nWhat standards will you put in place for commit messages? What do you expect to see in a commit message?\nWhen/how often will pull requests be issued?\nWhen will you have team members review code? How will you designate that code needs to be reviewed?\nAfter a review, if changes need to be made, what will the code editing process look like?\nWho will be responsible for merging code?"
  }
]